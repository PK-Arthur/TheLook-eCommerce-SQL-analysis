#  The storeâ€™s top 10 customers with the highest total order value
  -- Join users and order items table to match the user id in order to find the total sales price per user

SELECT 
  u.id,
  u.first_name,
  u.last_name, 
  SUM(o.sale_price) as Total_Order
FROM `bigquery-public-data.thelook_ecommerce.users`  u
LEFT JOIN `bigquery-public-data.thelook_ecommerce.order_items`  o
ON o.user_id = u.id
GROUP BY u.id, u.first_name, u.last_name
ORDER BY SUM(o.sale_price) DESC
LIMIT 10;



# Top 5 Best-Selling Products (2024)
 -- Join the order items and product table to match on product id
 -- Filter for items that have been shipped in the year 2024
 -- Group by product id and product name

SELECT o.product_id,
      p.name,
      COUNT(product_id) as num_sold,
      SUM(sale_price) as total_price
FROM `ecommerce-analysis-374102.thelook_ecommerce.order_items`  o
INNER JOIN `ecommerce-analysis-374102.thelook_ecommerce.products`  p
ON p.id = o.product_id
WHERE status = 'Shipped' 
AND EXTRACT(YEAR FROM created_at) = 2024
GROUP BY o.product_id, p.name
ORDER BY total_price DESC 
LIMIT 5;



# Top 3 Best-Selling Products per Category (2024)
  -- Join the order items and product table to match on product id
  -- Use a CTE and window function to get unique rank for the top sold products by each category
  --Filter for items that have been shipped in the year 2024 and have a rank less than 3
  -- Group by product id, product name and category

WITH ranked_products AS (
    SELECT 
        o.product_id,
        p.name,
        p.category,
        SUM(o.sale_price) AS total_price,
        ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY SUM(o.sale_price) DESC) AS rank
    FROM `ecommerce-analysis-374102.thelook_ecommerce.order_items`  o
    INNER JOIN `ecommerce-analysis-374102.thelook_ecommerce.products`  p
    ON p.id = o.product_id
    WHERE status = 'Shipped' 
    AND EXTRACT(YEAR FROM created_at) = 2024
    GROUP BY o.product_id, p.name, p.category
)
SELECT product_id, name, category, total_price
FROM ranked_products
WHERE rank <= 3
ORDER BY category, rank;


# Conversion Rate by Traffic Source
-- Count the total number of purchase events in the outer query to use as the numerator
-- Use a subquery to count the total number of "add to cart" events as the denominator
-- Calculate the conversion rate by dividing the numerator by the denominator

SELECT 
  traffic_source,
  ROUND(
    COUNT(event_type) / 
    (SELECT COUNT(event_type) 
     FROM `bigquery-public-data.thelook_ecommerce.events` c
     WHERE c.event_type = 'cart' 
     AND c.traffic_source = e.traffic_source), 2) * 100 AS conversion_rate
FROM `bigquery-public-data.thelook_ecommerce.events` e
WHERE event_type = 'purchase'
GROUP BY traffic_source;


# Sales Revenue by Traffic Source
-- Filter for purchase events in the events table to analyze completed orders
-- Join the orders table on user_id to link events with actual orders
-- Join the order_items table on order_id to access product sales details
-- Exclude orders with a status of 'Returned' or 'Cancelled'
-- Aggregate the total number of orders and sum of sales revenue per traffic source

SELECT 
  e.traffic_source,
  COUNT(o.order_id) AS num_orders,
  ROUND(SUM(oi.sale_price),2) AS total_revenue
FROM `bigquery-public-data.thelook_ecommerce.events` e
INNER JOIN `bigquery-public-data.thelook_ecommerce.orders` o
ON o.user_id = e.user_id
INNER JOIN `bigquery-public-data.thelook_ecommerce.order_items` oi
ON oi.order_id = o.order_id
WHERE e.event_type = 'purchase'
AND oi.status NOT IN ('Returned', 'Cancelled')
GROUP BY traffic_source
ORDER BY total_revenue DESC ;
